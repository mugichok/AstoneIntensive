            OSI
    Модель OSi - концептуальная модель, разработанная ещё в 1970-х годах, чтобы описать архитектуру и принцип работы сетей передачи данных

    Osi имеет 7 уровней, иерархически расположенных от большего к меньшему. Самым верхним является седьмой(прикладной), а самым нижним -
первый (физический).
В процессе передачи данных всегда участвуют устройство-отправитель, устройство-получатель, а также сами данные, которые должны быть
переданы и получены.

Уровни можно условно разделить на две группы:
- Media layers(уровни среды)
- Host layers(уровни хоста)
Media layers(1, 2, 3) занимаются передачей информации(по кабелю или беспроводной сети), используются сетевыми устройствами, такими как коммутаторы,
маршрутизаторы
Host layers(4, 5, 6, 7) используются непосредственно на устройствах(стационарные компьютеры, мобильные устройства)

Уровни OSI
1) Физический. Обмен физическими данными между физическими устройствами. Устройства физического уровня оперируют битами.
2) Канальный уровень. Стабильная передача по физическому каналу, включая идентификацию и корректировку ошибок, управление потоком
и синхронизацию frame
3) Сетевой уровень. Логическая адресация и маршрутизация пакетов данных между узлами сети - задачи устройств сетевого уровня. Сюда входит
определение лучшего пути для трансфера данных, фрагментация и повторная сборка пакетов по мере необходимости.
4) Транспортный уровень. Обеспечивает сквозную связь приложений на разнообразных устройствах, включая надежный трансфер данных, устранение
ошибок и управление потоком. Устройства L4 исключают потерю или дублирование, а также отвечают за правильную послежовательность
передачи данных.
5) Сеансовый уровень. Сфера ответсвенности L5 - контроль и управление сенсом связи между двумя устройствами, включая создание,
управление и завершение сеансов.
6) Уровень представления. Выполняет услуги по переводу и форматированию данных, включая преобразование, кодирование, дешифрирование, сжатие
и декомпрессию. L6 гарантирует, что данные могут быть представлены в совместимом формате между различными системами.
7) Прикладной уровень. Взаимодействует неспосредственно с пользователем и его прикладным ПО. Устройства приклодного уровня предоставляют
сетевые услуги конечному пользователю, такие как электронная почта, просмотр веб-страниц, передача файлов и удаленный доступ

    TCP Socket
Клиент-серверная архитектура - наиболее распространенная структура приложений в интернете.
Обмен запросами и ответами между сервером и клиентом называется коммуникацией посредствам сокетов.

Socket- это программная(логическая конечная точка), устанавливающая двунаправвленную коммуникацию между сервером и одной или несколькими
клиентскими программами. Сокетов не существует на физическом уровне

команды TCP-socket
Socket()- на сервере создаётся конечная точка для коммуникации.
Bind() - сокету присваивается уникальный номер и для него резервируется уникальная комбинация IP-адреса и порта
Listen() - после создания сокета сервер ожидает подключение клиента
Accept() - сервер получает запрос на подключение от клиентского сокета
Connect() - клиент и сервер соединены друг с другом
Send()/Recieve() - обмен данными между клиентом и сервером.
Close() - после обмена данными клиент и сервер разрывают соединение

Hypertext Transfer Protocol(HTTP) представляет собой протокол прикладного уровня для передачи гипер-медиа документов, таких как
HTML. Он разработан для обмена данными между веб-браузерами, веб-серверами, но так же может быть использован для иных целей.
Протокол HTTP представляет собой классическую модель клиент-сервер с клиентом открытие соединения, чтобы сделать запрос, а затем ждать,
пока не получит ответ.
Клиенты и серверы взаимодействуют путём обмена отдельными сообшениями в отличие от потока данных. Сообщения, отправляемые клиентом, обычно
веб-браузером, называется запросом, а сообщения сервера - ответами

Rest требования
1) Отделение клиента от сервера
Код запросов остаётся на стороне клиента, а код дл доступа к данным- на стороне сервера

2) отсутствие записи состояния клиента . Сервер не должен хранить информацию о состоянии клиента
3) Кэшируемость. в данных запроса должно быть указано, нужно ли кэшировать данные
4) Единство интерфейса. Все данные должны запрашиваться через оодин url адрес стандартными протоклами, например, HTTP
5) Многоуровневость системы. В REStful сервера могут распологаться на разных уровнях, при этом каждый сервер взаимодействует только
с юлижайшими уровнями и не связан запросами с дургими