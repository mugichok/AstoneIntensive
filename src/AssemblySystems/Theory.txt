Система сборки- это скриптовый код, написанный обычно на определенном языке программирования.

                    Apache maven
    Предназначен для автоматизации процесса сборки проектов на основе описания их структуры в файле POM (Project Object Model), который
является подмножеством формата XML.
    maven позволяет выполнять компиляцию кодов, создавать дистрибутив программы, архивные файлы JAR/WAR и генерировать документацию.
Простые проекты maven можно собрать в командной строке.
В отличие от ant с императивной сборкой проекта, maven обеспечивает декларативную сборку проекта. Все задачи по обработке файлов maven
выполняет по средствам их обработки последовательность встроенных и внешних плагинов.

    Основные концепции:
1. Соглашение по конфигурации - принцип, заключающейся в том, что рассматриваемые аспекты нуждаются в конфигурации тогда и только тогда, когда
этот аспект не удовлетворяет некоторой спецификации, т.е. возникает не типичная ситуация.

2. Архетипы - это инструмент шаблонов, каждый из которых определён паттерном или моделью, по аналогии с которой создаются производные.
Стандартная структура каталогов проекта - одна из реализаций принципа архетипов в maven.

3. Жизненный цикл - это список поименованных фаз, определяющих порядок действий при его построении проекта.

4. Архитектура в виде plugin - архитектуры, которая позволяет применять плагины для различных задач (compile, test, build, deploy, checkstyle,
pmd, scp-transfer) для данного проекта, без необходимости их в явном виде инсталлировать.

5. Зависимости - задаются в файле pom.xml и управляются проектом с помощью maven.

Плагины - это расширения, которые выполняют различные задачи на различных стадиях жизненного цикла проекта.

    Основные понятия:
1. Artifact - это ключевое понятие maven. По сути любая библиотека, хранящаяся в репозитории, к которой можно отнести зависимость или плагин.

2. Dependencies (зависимости) - представляют собой библиотеки, которые непосредственно используются в проекте для компиляции или тестирвания
кода.

3. Plugin - используется при сборке проекта или для каких-то других целей (deploy, создание файлов проекта для Eclipse и др.)

4. Archetype - это некая стандартная компановка каталогов и файлов в проектах различного типа(web, maven, swt/swing - проекты и прочие).
С помощью него maven узнаёт, как построить структуру проекта с соответствии с его архетипом.


                    Архитектура простого maven проекта
    Проектный файл pom.xml располагается в корне каталога.
-src: исходные файлы
-src/main: исходные коды проекта
-src/main/java: исходные java-файлы
-src/main/resources: ресурсные файлы, которые используются при компиляции или исполнении, например properties-файлы
-src/test: исходные файлы для организации тестирования
-src/test/java: JUtil-тест-задания для автоматического тестирования
-target: создаваемые в процессе работы maven файлы для сборки проекта
В зависимости от типа приложения(консольное, с интерфейсом, web, gwt и т.д.) структура может отличаться. В директории target maven собирает
проект(jar/war).

    Секции в проектном файле pom.xml
- GAV (groupid, artefactid, pacaging)
- секция свойств
- секция репозиториев
- Секция зависимостей
- Секция сборки
В конкретном проекте могут быть представлены не все секции

    Жизненный цикл maven проекта
Жизненный цикл maven проекта - это чётко определённая последовательность фаз. Когда maven начинает сборку проекта, он проходит через
определённую последовательность фаз, выполняя задачи, указанные в каждой из фаз. Maven имеет 3 стандартных жизненных цикла:
- Clean - жизненный цикл для очистки проекта
- Default - основной жизненный цикл
- site - жизненный цикл генерации проектной документации
Каждый из этих циклов имеет фазы pre и post. Они могут быть использованы для регистрации задач, которые должны быть запущены перед и после
указанной фазы. Стандартные жизненные циклы могут быть дополнены функционалом с помощью maven-плагинов. Палгины позволяют вставлять в
стандартный цикл новые шаги(например, распределение на сервер приложений) или расширять существующие шаги.

    Основные фазы жизненного цикла default:
- generate-sources - включение исходного кода в фазу
- compile - компиляция исходных кодов проекта
- tet-compile - компиляция исходных кодов тестов
- test - собранный код тестируется, используя приемлемый фреймворк типа JUnit
- package - упаковка откомпилированных классов и прочих ресурсов в дистрибутивный формат
- integration-test - программное обеспечение в целом или его крупные модули подвергаются интеграционному тестированию. Проверяется
взаимодействия между составными частями программного продукта
- install - установка программного обеспечения в maven-репозиторий, чтобы сделать его доступным для других проектов
- deploy - стабильная версия программного обеспечения копируется в удалённый maven-репозиторий, чтобы сделать его доступным для других
пользователей или проектов.


    Dependency
Это связь, которая говорит, что для некоторых фаз жизненного цикла maven проекта требуются некоторые артефакты. Зависимости проекта
описываются в секции <dependencies> файла pom.xml. Для каждого используемого в проекте артефакта необходимо указать GAV (groupid,
artefactid, version), где
- grioupId - идентификатор производителя объекта. Часто используемая схема в, принятая в обозначении пакетов Java
- artefactID - идентификатор объекта. Обычно это имя создаваемого модуля или приложения.
- version - версия описываемого объекта. Для незавершенных объектов принято добавлять суффикс SNAPSHOT. Например, 1.0-SNAPSHOT.
Как правило информации GAV(groupID, artefactID, version) доятаточно maven'у для поиска указанного артефакта в репозиториях.

    Dependency. Scope
ОБласть действия scope определяет этап жизненного цикла проекта, в котором эта зависимость будет использоваться.
Maven использует 6 областей:
- compile - по умолчанию;
- provided - очень похожа на compile, но эта зависимость в сборку не попадает;
- runtime - зависимость с данной областью видимости на обязательна для compilation и используется в фазе выполнения.
- test - зависимость используется при тестировании кода приложения
- system - область похожа на provided за исключением того, что необходимо определить физическое расположение артефакта на диске. Артефакт
с этой областью видимости maven не ищет в репозитории;
- import - эта область используется в зависимости секции <DependencyManagment> при сложных связях абсолютного пути к файлу, определенному
в теге SystemPath

    Dependency. Транзитивные зависимости
Тарнзитивные завсимости позволяют избегать необходимости изучения и поределения библиотек, которые требуются для самой зависимости.
Maven включает их автоматически. В общем случае все зависимости, используемые в проекте наследуются от родителей.
Ограничений по уровню наследований не существует, что, в свою очередь, может вызвать их сильный рост.
В качестве примера можно рассмотреть создание проекта A, который зависит от проекта B. Но проект B, в свою очередь, зависит от проекта C.
Подобнаяя цепочка зависимостей может быть сколь угодно длинной. Как в этом случае поступает maven и как свзан проект A с проектом C.
Можно выставить общую зависимость для проекта в блоке dependency managment.

    Plugins
maven базтруется на плагин-архитектуре, которая позволяет использовать плагины для различных задач (test, compile, build, deploy и т.п.).
Иными словами, maven запускает определенные плагины, которые выполняют всю работу. То есть, если мы хотим научить maven особым сборкам проекта,
то необходимо добавить в pom.xml указание на запуск нужного плагина в нужную фазу и с нужными параметрами. Это вохможно за счёт того, что
информация поступает плагину через стандартный вход, а результаты пишутся в его стандартный выход.
Объявление плагина в проекте похоже на объявление зависимости. Плагины также идентифицируются с помощью GAV. Объявление плагина в pom.xml
позволяет зафиксировать версию плагина, задать ему необходимые параметры, опеределить конфигурационные параметры, привязать к фазам.

    Основные плагины:
- maven-compiler-plugin - плагин компиляции;
    Самый популярный плагин, позволющий управлять версией комилятора и используемый практически во всех проектах. Он доступен по умолчанию,
но практически во всех проектах его приходится переобъявлять. В простейшем случае плагин позволяет определить версию java машины (JVM),
для которой написан код приложения, и версию java для компиляции кода.

- maven-recources-plugin - плагин включения ресурсов;
    Для копирования всех ресурсов()файлы изображений, файлы, properyies) перед сборкой проекта в директорию target.

- maven-source-plugin - плагин включения исходных кодов;
    Позволяет включать в сборку проекта исходный код. Данная возможность особенно полезна, если создаётся многомоудльная архитектура проекта,
включающая различные файлы .jar, и требуется отладка отдельных частей.

- maven-dependency-plugin - плагин копирования зависимостей;
- maven-jar-plugin - плагин создания jar-файла;
- maven-surefile-plugin - плагин запуска тестов;
    Предназначен для запуска тестов и генерации отчетов по результатам их выполнения. По умолчанию на тестирование запускаются все
java-файлы, наименование которых начинаетя с "Test" и заканчивается "Test" или "TestCase": **/Test*.java, **/*Test.java, **/*TestCase.java.
Если необходимо запустить java файлы с отличным от соглашения наименованием, например Sample.java, то необходимо в проектный файл pom.xml
включить соответсвующую секцию с плагином maven-surefile-plugin.
- maven-archetype-plugin - плагин создания проекта;


                                        Gradle
    Это интсрумент управления зависимостями и автоматизации сборки, основанный на концепциях Ant и Maven.
Gradle использует предметно-ориентированный язык на основе Groovy. Это привело к уменьшению размера файлов файлов конфигурации и уменьшению
беспорядка, поскольку язык был специально разработан для решения конкретных проблем предметной области.
    По своей сути Gradle намеренно предоставляет очень мало функций. Плагины добавляют все полезные функции. В примере использовван плагин
Java, который который позволяет компилировать код Java и другие полезные функции.
    В Gradle шаги сборки названы задачами, в аналог фаз Maven



