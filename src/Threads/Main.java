package src.Threads;

/*
Многопоточность - свойство платформы или приложения, состоящее в том, что процесс, порожденный в операционной системе,
может состоять из нескольких потоков, выполняющихся "параллельно". то есть без предписанного порядка во времени

Процесс - это экземпляр выполняемой программы, а также текущее значение счетчиков команд, регистров и переменных.

Поток - это основная единица, которой операционная система выделяет время процесса

Отличие многопоточности от параллелизма в том, что параллелизм предусматривает использование отдельного ядра цпу под каждый поток,
а в многопоточночти на отдельном ядре цпу может работать несколько потоков

Базовый способ создания потока - new Thread() через наследование и переопределение методов,
Другой способ - имплементировать функционального интерфейса

Методы управления потоком:

void start() - запуск потока
void join()/join(mills) - ожидание завершения потока
void sleep(int) - приостановка потока на заданное время
void interrupt() - прерывание выполнения потока
void wait()/wait(mills) - приостановка потока, пока другой поток не вызовет метод notify()
void notify() - "пробуждение" отдельного потока, ожидающего "сигнала"
boolean isAlive() - проверка, выполняется ли поток
boolean isDeamon() - проверяет, является ли поток "deamon"

Состояния потока:
New: когда вы создаёте новый объект Thread(), но ещё не запустили его с помощью метода Start(), поток находится в состоянии
"New". Это означает, что поток был создан, но ещё не началось его выполнение.
Runnable: после вызова метода start() он переходит в соcтояние "Runnable". В этом состоянии поток готов к запуску, но в данный
момент может быть не запущен, поскольку планировщик ОС ещё не запланировал его.
Running: как только поток запланирован ОС, он переходит в состояние "Running"(Выполняется). В это время код потока активно выполняется
и потребляет время процессора.
Blocked: Работающий поток может перейти в состояние Blocked(заблокирован), также известное как Waiting или Blocked on I/O.
В этом состоянии он ожидает ресурса, например, блокировки или ввода пользователя. Поток не выполняет свой код, но он сразу будет считаться
Runnable, как только ресурс станет доступным.
Terminated: поток переходит в состояние Terminated(завершён) или Dead, когда он завершит своё выполнение или после генерации исключения,
вызывающего внезапное завершение потока. Если поток находится в этом состоянии, его нельзя перезапустить.
 */

public class Main {
}
